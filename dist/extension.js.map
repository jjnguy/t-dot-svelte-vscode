{"version":3,"sources":["webpack://t-dot-svelte-vscode/./src/extension.ts","webpack://t-dot-svelte-vscode/external \"util\"","webpack://t-dot-svelte-vscode/external \"vscode\"","webpack://t-dot-svelte-vscode/webpack/bootstrap","webpack://t-dot-svelte-vscode/webpack/startup"],"names":["context","console","log","disposable","vscode","commands","registerCommand","editor","window","activeTextEditor","selectedText","document","getText","selection","inputBox","createInputBox","prompt","onDidAccept","dispose","stringsPath","workspace","findFiles","length","showErrorMessage","strings","JSON","parse","openTextDocument","value","translations","fs","writeFile","TextEncoder","encode","stringify","edit","replace","onDidHide","_","show","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"6cAEA,eACA,SAIA,oBAAyBA,GAIxBC,QAAQC,IAAI,wEAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,8CAChD,IAAY,EAAD,gCAKV,MAAMC,EAASH,EAAOI,OAAOC,iBAC7B,IAAKF,EAAQ,OAEb,IAAIG,EAAeH,EAAOI,SAASC,QAAQL,EAAOM,WAE9CC,EAAWV,EAAOI,OAAOO,iBAC7BD,EAASE,OAAS,0BAClBF,EAASG,aAAY,IAAY,EAAD,gCAC/BH,EAASI,UAET,IAAIC,QAAoBf,EAAOgB,UAAUC,UAAU,oBACnD,GAA0B,GAAtBF,EAAYG,OAEf,YADAlB,EAAOI,OAAOe,iBAAiB,6DAIhC,IAAIC,EAAUC,KAAKC,aAAatB,EAAOgB,UAAUO,iBAAiBR,EAAY,KAAKP,WAEnFY,EAAQA,QAAQV,EAASc,OAAS,CAAEC,aAAc,CAAE,GAAMnB,UAEpDN,EAAOgB,UAAUU,GAAGC,UAAUZ,EAAY,IAAI,IAAI,EAAAa,aAAcC,OAAOR,KAAKS,UAAUV,EAAS,KAAM,QAE3GjB,EAAO4B,MAAKA,IACXA,EAAKC,QAAQ7B,EAAOM,UAAW,WAAWC,EAASc,qBAGrDd,EAASuB,WAAUC,GAAKxB,EAASI,YACjCJ,EAASyB,YAGXvC,EAAQwC,cAAcC,KAAKtC,IAI5B,2B,QCxDAuC,EAAOC,QAAUC,QAAQ,S,QCAzBF,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUJ,QAG3C,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAK,EAAoBD,GAAUE,KAAKP,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,QCjBRG,CAAoB,M","file":"extension.js","sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport { TextEncoder } from 'util';\nimport * as vscode from 'vscode';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"t-dot-svelte-vscode\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('t-dot-svelte-vscode.replaceWithTranslation',\n\t\tasync () => {\n\t\t\t// The code you place here will be executed every time your command is executed\n\n\t\t\t// Display a message box to the user\n\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\tif (!editor) return;\n\n\t\t\tlet selectedText = editor.document.getText(editor.selection);\n\n\t\t\tlet inputBox = vscode.window.createInputBox();\n\t\t\tinputBox.prompt = \"new key for translation\";\n\t\t\tinputBox.onDidAccept(async () => {\n\t\t\t\tinputBox.dispose();\n\n\t\t\t\tlet stringsPath = await vscode.workspace.findFiles(\"**/strings*.json\");\n\t\t\t\tif (stringsPath.length != 1) {\n\t\t\t\t\tvscode.window.showErrorMessage('t-dot-svelte-vscode requires a single strings*.json file.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet strings = JSON.parse((await vscode.workspace.openTextDocument(stringsPath[0])).getText());\n\n\t\t\t\tstrings.strings[inputBox.value] = { translations: { \"en\": selectedText } };\n\n\t\t\t\tawait vscode.workspace.fs.writeFile(stringsPath[0], new TextEncoder().encode(JSON.stringify(strings, null, '  ')));\n\n\t\t\t\teditor.edit(edit => {\n\t\t\t\t\tedit.replace(editor.selection, `<T key=\"${inputBox.value}\" />`);\n\t\t\t\t});\n\t\t\t});\n\t\t\tinputBox.onDidHide(_ => inputBox.dispose());\n\t\t\tinputBox.show();\n\t\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() { }\n","module.exports = require(\"util\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(112);\n"],"sourceRoot":""}